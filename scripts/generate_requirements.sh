#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# Generate a requirements_lock.txt file from Bazel's Python dependencies
# -----------------------------------------------------------------------------
#
# Usage (from repo root):
#   ./scripts/generate_requirements.sh
# -----------------------------------------------------------------------------

set -euo pipefail

OUTPUT_FILE="requirements_lock.txt"

echo "# Generated package requirements for local venv" > "${OUTPUT_FILE}"
echo "# Do not edit manually - this file is generated by Bazel" >> "${OUTPUT_FILE}"
echo "" >> "${OUTPUT_FILE}"

# Extract Python dependencies from the Repository
echo "Extracting Python dependencies from Bazel..."

# This uses a simple approach of checking imports in Python files
# A more robust solution would parse Bazel's dependency graph directly

# Find all import statements in Python files and extract package names
find python -name "*.py" -type f -exec grep -E "^import|^from" {} \; | \
  grep -v "__future__" | \
  sed 's/^import //g; s/^from //g; s/ import.*$//g' | \
  grep -v "^python." | \
  grep -v "^_" | \
  sort -u > /tmp/py_imports.txt

# Add known dependencies with versions (this would ideally come from Bazel)
{
  echo "pytest==8.3.5"
  echo "pydantic==2.11.3"
  echo "typer==0.15.2"
  echo "httpx==0.28.1"
  echo "pyyaml==6.0.2"
  echo "ruff==0.11.6"
} >> "${OUTPUT_FILE}"

echo "Requirements written to ${OUTPUT_FILE}"
echo "Run ./scripts/setup_venv.sh to create a virtual environment with these dependencies"
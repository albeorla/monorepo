#!/usr/bin/env bash
#
# Enhanced scaffolding helper for Python modules in the monorepo.
#
# Usage:
#   ./scaffolding/scaffold_python.sh <module_name> [description] [author]
#
# The script materialises a Bazel‑compatible Python package under
# `python/<module_name>` following the same layout generated by the
# `python_cookiecutter` template.
#
# Examples:
#   ./scaffolding/scaffold_python.sh data_processor
#   ./scaffolding/scaffold_python.sh pdf_generator "Generates PDF reports" "Data Team"
#
# Notes:
# * We intentionally avoid a hard dependency on the `cookiecutter` CLI to
#   keep the bootstrap experience lightweight (see PRD §Cost Efficiency).
# * Place‑holder substitution is performed with `sed` which is available in
#   both GNU and BSD flavours. We detect the platform to choose the correct
#   in‑place flag syntax.
#
set -euo pipefail

show_usage() {
  echo "Usage: $0 <module_name> [description] [author]" >&2
  echo "" >&2
  echo "Arguments:" >&2
  echo "  module_name   Name of the Python module (required)" >&2
  echo "  description   Brief description of the module (optional)" >&2
  echo "  author        Module author or team (optional)" >&2
  exit 1
}

if [[ $# -lt 1 ]]; then
  show_usage
fi

NAME=$1
DESCRIPTION="${2:-A Python module in the monorepo}"
AUTHOR="${3:-Monorepo Team}"
DEST_DIR="python/${NAME}"

# Ensure destination does not already exist to prevent accidental overwrite.
if [[ -e "${DEST_DIR}" ]]; then
  echo "Error: directory ${DEST_DIR} already exists" >&2
  exit 1
fi

TEMPLATE_DIR="scaffolding/python_cookiecutter/{{cookiecutter.module_name}}"

# Copy template skeleton then perform placeholder substitution.
mkdir -p "${DEST_DIR}"
cp -R "${TEMPLATE_DIR}/." "${DEST_DIR}/"

# Rename the primary files to the requested module name.
mv "${DEST_DIR}/{{cookiecutter.module_name}}.py" "${DEST_DIR}/${NAME}.py"
if [[ -f "${DEST_DIR}/test_{{cookiecutter.module_name}}.py" ]]; then
  mv "${DEST_DIR}/test_{{cookiecutter.module_name}}.py" "${DEST_DIR}/test_${NAME}.py"
fi

# Helper function: portable in‑place sed (BSD vs GNU).
function sed_inplace() {
  local pattern="$1" file="$2"
  if sed --version >/dev/null 2>&1; then
    # GNU sed
    sed -i -e "${pattern}" "$file"
  else
    # BSD / macOS sed
    sed -i '' -e "${pattern}" "$file"
  fi
}

# Replace placeholders in all files under destination directory.
for f in $(find "${DEST_DIR}" -type f); do
  sed_inplace "s/{{cookiecutter.module_name}}/${NAME}/g" "$f"
  sed_inplace "s/{{cookiecutter.module_description}}/${DESCRIPTION}/g" "$f"
  sed_inplace "s/{{cookiecutter.author}}/${AUTHOR}/g" "$f"
done

# Create an __init__.py file if it doesn't exist
if [[ ! -f "${DEST_DIR}/__init__.py" ]]; then
  echo '"""${NAME} module."""' > "${DEST_DIR}/__init__.py"
fi

echo "✅ Created Python module ${NAME} in ${DEST_DIR}"
echo "Next steps:"
echo "  - Review and update the README.md file with specific details"
echo "  - Run tests with: bazel test //python/${NAME}:${NAME}_test"
echo "  - Run the module with: bazel run //python/${NAME}"

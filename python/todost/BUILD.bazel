load("@rules_python//python:defs.bzl", "py_library", "py_binary", "py_test")
load("//tools/rules:oci_python.bzl", "py_service_image")
load("//tools/oci:registry.bzl", "ghcr_push", "ghcr_development_push")

# Bazel targets for the todost Python module.

py_library(
    name = "todost_lib",
    srcs = ["todost.py"],
    data = ["para_rules.yaml"],
    # External Python dependencies are provided via Bazel's PyPI repos.
    deps = [
        "@pip//httpx:pkg",
        "@pip//pydantic:pkg",
        "@pip//pyyaml:pkg",
        "@pip//typer:pkg",
    ],
    visibility = ["//visibility:public"],
)

py_binary(
    name = "todost",
    srcs = ["todost.py"],
    deps = [":todost_lib"],
    main = "todost.py",
    data = [
        "para_rules.yaml",
        # Include helper files for better user experience
        ".env.example",
        "run_todost.sh",
    ],
)

# Helper script target for easier invocation
sh_binary(
    name = "run_todost",
    srcs = ["run_todost.sh"],
    data = [
        ":todost",
        ".env.example",
    ],
)

py_test(
    name = "todost_test",
    srcs = ["test_todost.py"],
    deps = [":todost_lib"],
)

py_test(
    name = "integration_test",
    srcs = ["integration_test_todost.py"],
    deps = [":todost_lib"],
    tags = ["integ"],  # Mark as integration test
)

# Container image for todost
py_service_image(
    name = "todost_image",
    binary = ":todost",
    base = "@distroless_python_nonroot",
    env = {
        "LOG_LEVEL": "INFO",
    },
    labels = {
        "org.opencontainers.image.description": "Todoist â†’ PARA+GTD Exporter",
        "org.opencontainers.image.version": "1.0.0",
    },
    workdir = "/app",
)

# Production push target
ghcr_push(
    name = "ghcr_push",
    image = ":todost_image",
    repository = "todost",
    tags = ["latest", "v1.0.0"],
)

# Development push target for quick iteration
ghcr_development_push(
    name = "ghcr_development_push",
    image = ":todost_image",
    repository = "todost",
)
